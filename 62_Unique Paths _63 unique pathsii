#动态规划问题

class Solution {
    public int uniquePaths(int m, int n) {
        if(m==1||n==1){
            return 1;
        }else if(m==0 || n == 0){
            return 0;
        }
        int[][] dp = new int[m+1][n+1];
        //初始化
        for(int i=1;i<=m;i++){
            dp[i][1] = 1;
        }
        for(int i=1;i<=n;i++){
            dp[1][i] = 1;
        }
        for(int i=2;i<=m;i++){
            for(int j=2;j<=n;j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m][n];
    }
}


## 63 unique pathii
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        //从start到end有多少条不同的路径，还是动态规划问题
        int row = obstacleGrid.length;
        if(row == 0){
            return 0;
        }
        int col = obstacleGrid[0].length;
             
        int[][] dp = new int[row+1][col+1];
        //初始化
        boolean flag = false;
        for(int i=1;i<=row;i++){
            //初始化需要进行判断
            if(obstacleGrid[i-1][0] == 1){
                dp[i][1] = 0;
                flag = true;
            }else{
                if(flag){
                    dp[i][1] = 0;
                }else{
                    dp[i][1] = 1;
                }
            }
            
        }
        
        
        flag = false;
        for(int i=1;i<=col;i++){
            if(obstacleGrid[0][i-1] == 1){
                dp[1][i] = 0;
                flag = true;
            }else{
                if(flag){
                    dp[1][i] = 0;
                }else{
                    dp[1][i] = 1;
                }
        }
        
        }    
        for(int i=2;i<=row;i++){
            for(int j=2;j<=col;j++){
                if(obstacleGrid[i-1][j-1] == 1){
                    dp[i][j] = 0;
                }else{
                    dp[i][j] = dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        
        return dp[row][col];
    }
}
